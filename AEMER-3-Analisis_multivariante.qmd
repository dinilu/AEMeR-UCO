---
title: "Análisis multivariante en R"
author: "Diego Nieto Lugilde"
date: 10/16/2024
institute: "Universidad de Córdoba (España)"
slide-number: true
format:
  revealjs:
    logo: img/logos.png
    footer: "[AEMeR](https://dnietolugilde.com/AEMeR)"
    scrollable: true
    chalkboard: true
include-in-header: 
  text: |
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
lightbox: auto
editor: source
---

# Preparación de datos

## Análisis multivariante usa **datos tabulados**

|            | sp_1 | sp_2 | ... | sp_n |
|:----------:|:----:|:----:|:---:|:----:|
| **site_1** |  1   |  0   | ... |  1   |
| **site_2** |  0   |  0   | ... |  1   |
|  **...**   | ...  | ...  | ... | ...  |
| **site_n** |  0   |  1   | ... |  1   |

: Matriz de comunidades (sitios x especies) {.table}

## También los datos de las variables ambientales

|            | v_1 | v_2 | ... | v_n |
|:----------:|:---:|:---:|:---:|:---:|
| **site_1** |  1  |  0  | ... |  1  |
| **site_2** |  0  |  0  | ... |  1  |
|  **...**   | ... | ... | ... | ... |
| **site_n** |  0  |  1  | ... |  1  |

: Matriz de variables (sitios x variables) {.table}

## Cargando de datos en R

```{r}
#| echo: true

library(openxlsx)
com <- read.xlsx("data/Inventarios.xlsx", sheet = 1, rowNames = TRUE)
head(com)

env <- read.xlsx("data/Variables.xlsx", sheet = 1, rowNames = TRUE)
head(env)

```

## Los nombres de especies largos pueden saturar los gráficos 

-   Si la identidad es irrelevante: **usar nombres genéricos**
    -   Quercus ilex: SP_1
-   Si la identidad de la especie es relevante: **acortar**
    -   Quercus ilex: Q_ILEX
-   Cornell Ecology Program (CEP) proporciona una abreviatura estandarizada:
    -   8 caracteres: 4 primeros del género y 4 de la especie:
    -   Quercus ilex: QUERILEX


## Transformación de valores de dominancia-abundancia

| Índice Braun-Blanquet | Valor de Van deer Maarel |
|:---------------------:|:------------------------:|
|       ausencia        |            0             |
|           r           |            1             |
|          \+           |            2             |
|           1           |            3             |
|          2m           |            4             |
|          2a           |            5             |
|          2b           |            6             |
|           3           |            7             |
|           4           |            8             |
|           5           |            9             |
: {.table .table-striped .sm}


## Datos de presencia-ausencia

Los análisis con datos de presencia-ausencia suelen ser más robustos que los de abundancia o cobertura

```{r}
#| echo: true

pres <- ifelse(com > 0, 1, 0)
head(pres)
```

# Análisis de ordenación en R

Para el análisis de vegetación en R hay un paquete muy útil: `vegan`

```{r, warning=FALSE}
#| echo: true
#| output: false

#install.packages("vegan")
library(vegan)
```

## Análisis de componentes principales (PCA)

Aunque parezca confuso, se usa la función `rda`.

::: callout-note
Así se juntan la aproximación *unconstrained* y su equivalente *constrained* en la misma función. Si se especifican variables ambientales se ejecuta la versión *constrained*. Si no se especifican se ejecuta la versión *unconstrained*.
:::

```{r}
#| echo: true

library(vegan)
com_pca <- rda(com)
com_pca
```


## Análisis de redundancia (RDA)

```{r}
#| echo: true

com_rda <- rda(com, env)
com_rda
```


## Análisis de correspondencia (CA)

Aunque parezca confuso, para CA y CCA se usa la función `cca`.

::: callout-note
Así se juntan la aproximación *unconstrained* y su equivalente *constrained* en la misma función. Si se especifican variables ambientales se ejecuta la versión *constrained*. Si no se especifican se ejecuta la versión *unconstrained*.
:::

```{r}
#| echo: true

com_ca <- cca(com)
com_ca
```


## Análisis de correspondencia sin tendencia (DCA)

Para DCA se usa la función `decorana`

```{r}
#| echo: true

com_dca <- decorana(com)
com_dca
```


## Análisis de correspondencia canónica (CCA)

```{r}
#| echo: true

com_cca <- cca(com, env)
com_cca
```


## PCA basado en transformaciones

Para ello se transforman los datos con la función `decostand`

```{r}
#| echo: true

com_hel <- decostand(com, 'hellinger')

com_tbpca <- rda(com_hel)
com_tbpca
```


## PCA basado en transformaciones

Para ello se transforman los datos con la función `decostand`

```{r}
#| echo: true

com_tbrda <- rda(com_hel, env)
com_tbrda
```


## Visualizar ordenación

Es interesante observar como se disponen especies y sitios en el espacio bidimensional. 

Para ello usamos la función `plot` sobre cualquiera de los objetos de ordenación.

```{r}
#| echo: true

plot(com_ca)
```


## ¿Gráficos sobrecargados?

Puedes representar solo 'especies' o 'sitios' con el argumento `display`

```{r}
#| echo: true

plot(com_ca, display = "sites")
plot(com_ca, display = "species")
```


# Análisis de clasificación en R

## Medida de disimilitud

Para calcular la disimilitud entre todos los 'sitios' usamos la función `vegdist`

```{r}
#| echo: true

dist <- vegdist(com)
dist
```

## Tipos de distancias

La disimilitud entre 'sitios' se puede calcular de varias maneras: `euclidean`, `manhattan`, `gower`, `canberra`, `bray`, `jaccard`...

Para ello usamos el argumento `method`

```{r}
#| echo: true

dist <- vegdist(com, method="euclidean")
dist <- vegdist(com, method="bray")
dist <- vegdist(com, method="jaccard")
head(dist)
```


## Clasificación jerárquica

Para ello usamos la función `hclust` sobre la matriz de distancias

```{r}
#| echo: true

hc <- hclust(dist)
hc
```


## Métodos de agrupación

Métodos para realizar la agrupación hay varios: `single`, `complete`, `average`, `centroid`...

Especificamos el método con el argumento `method`.

```{r}
#| echo: true

hc <- hclust(dist, method="single")
hc <- hclust(dist, method="centroid")
hc <- hclust(dist, method="average")
hc <- hclust(dist, method="complete")
hc
```


## Visualizar clasificaciones

Las clasificaciones jerárquicas se pueden visualizar como un árbol filogenético con la función `plot`

```{r}
#| echo: true

plot(hc, hang=-1)
```


## Interpretación

Establecer grupos en un árbol no es siempre trivial

-   Se puede usar un umbral para determinar los grupos
-   O establecer un número determinado de grupos

```{r}
#| echo: false

plot(hc, hang=-1)
```


## Visualizar clasificaciones con un umbral

```{r}
#| echo: true

plot(hc, hang=-1) 
rect.hclust(hc, h=0.7)
```


## Visualizar clasificaciones con número de grupos

```{r}
#| echo: true

plot(hc, hang=-1)
rect.hclust(hc, k=4)
```


## Extraer grupos

En ocasiones es interesante extraer la asignación de cada sitio a un grupo

Para ello podemos usar la función `cutree`

```{r}
#| echo: true

grp <- cutree(hc, h=0.7)
grp <- cutree(hc, k=4)
grp
```


# Combinar ordenación y agrupamientos

## Dibujar agrupamientos sobre los gráficos de ordenación

Para ello usamos la función `ordihull`

```{r}
#| echo: true

plot(com_ca, display="sites")
ordihull(com_ca, grp, lty=2, col="red")
```

## Hay más opciones...

También se pueden usar las funciones `ordispider` y `ordiellipse`

```{r}
#| echo: true

plot(com_ca, display="sites")
ordispider(com_ca, grp, lty=2, col="red")
```

## ... que elegirás en función de tu necesidad

Para ello usamos las funciones `ordispider` y `ordiellipse`

```{r}
#| echo: true

plot(com_ca, display="sites")
ordiellipse(com_ca, grp, lty=2, col="red")
```
